#include <OB/CosNaming.idl>#include <OB/IOP.idl>#pragma prefix "oracle.com"/* Contains the interfaces, structures and constants comprising the   CORBA services and interfaces provided by the Aurora/ORB,   Definition of the sess_iiop service body, and the CORBA bootstrap   interface*//* The service interface to the Aurora/ORB */module AuroraServices {  exception ActivationException {    wstring errorMsg;  };  typedef sequence<wstring> schemas;  /* The objects published in the service's     session name space */  struct objAttribs {    wstring owner;    wstring class_name;    wstring schema;    wstring helper;    wstring creation_ts;    wstring last_modified;    schemas read;    schemas write;    schemas execute;  };    typedef objAttribs  ObjectAttributes;  interface PublishedObject {    readonly attribute long long node;    void get_attributes(out ObjectAttributes attribs);    void set_attributes(in wstring owner, 			in schemas read, 			in schemas write, 			in schemas execute);    Object activate(out wstring helper) raises (ActivationException);    Object activate_no_helper() raises (ActivationException);    void destroy();    void republish(in wstring className, in wstring helper);    void republish_in(in wstring className, in wstring schema, in wstring helper);  };  struct ctxAttribs {    wstring owner;    wstring creation_ts;    schemas read;    schemas write;    schemas execute;  };  typedef ctxAttribs ContextAttributes;  /* The directory interface to the service's session name     space */  interface PublishingContext : CosNaming::NamingContext {    readonly attribute long sessionId;    readonly attribute long long node;    void get_attributes(out ContextAttributes attibs);    void set_attributes(in wstring owner,			in schemas read,			in schemas write,			in schemas execute);    PublishedObject create_object(in CosNaming::Name name,				  in wstring className,				  in wstring helper)      raises(NotFound, CannotProceed, InvalidName, AlreadyBound);    PublishedObject create_object_in(in CosNaming::Name name,				     in wstring className,				     in wstring schema,				     in wstring helper)      raises(NotFound, CannotProceed, InvalidName, AlreadyBound);  };  /* The structure representing the locale     of the Java vm */  struct Locale {    wstring language;    wstring country;    wstring variant;  };  /* The login interface */  typedef sequence<octet> byteArray;  interface LoginServer {    byteArray O3Logon_A(in wstring username);    byteArray O3Logon_A_Locale(in wstring username, in Locale locale);    byteArray O3Logon_A_Role(in wstring username, in wstring role);    byteArray O3Logon_A_Role_Locale(in wstring username,				    in wstring role,				    in Locale locale);    boolean O3Logon_B(in byteArray response);    short getCharSet();    boolean clear_text_login(in wstring username,                             in wstring password,                             in wstring role);  };  /* The Aurora/ORB security context */  struct SecurityContext {    boolean status;    wstring username;    wstring password;    wstring role;    /* the locale setting */    wstring language;    wstring country;    wstring variant;  };  typedef unsigned long		CredentialId;  const CredentialId		CredentialUsernamePassword = 0;  typedef unsigned long		SecurityContextId;  const CredentialId		AuroraSecurityContextId = 0x4f524100;  /* The exception raised if an error during     execution happens.  Someone's head was     cut off, there was a mess, here's the     report */  exception ExecutionError {    wstring exceptionClassName;    wstring msg;    wstring stackTrace;  };  /* The Executioner.  A service that will     execute execute static methods on classes,     supplying string arguments.  Optional     schema can be supplied to determine the     initial resolution of the class */  typedef sequence<wstring> Args;     interface Executioner {    wstring exec(out wstring sysOut,		 in wstring className,		 in wstring method,		 in Args args) raises (ExecutionError);    wstring exec_in(out wstring sysOut,		    in wstring className,		    in wstring schema,		    in wstring method,		    in Args args) raises (ExecutionError);  };    /* Executable.  This interface provides a standard     mechanism for invoking published objects in the     service's session address space.  */  interface Executable {    long main(out wstring sysOut,		    in Args args);  };  /* A service which loads a java classes and source into the rdbms,     as well as utilites for resolving and compiling these classes */  interface LoadJava {    long create_class(out wstring errors,		      in wstring classname,		      in wstring resolver,		      in wstring schema,		      in wstring grant,		      in wstring bound,		      in byteArray classBits);    long create_resource(out wstring errors,			 in wstring resourcename,			 in wstring grant,			 in byteArray resourceBits);    long create_source(out wstring errors,		       in wstring classname,		       in wstring encoding,		       in wstring resolver,		       in wstring schema,		       in wstring grant,		       in wstring bound,		       in long compile,		       in wstring classSource);    long compile(out wstring errors, in wstring className);    long create_synonym(out wstring errors, in wstring className);    long has_changed(in wstring className, in byteArray md5);  };  /* A utility for generating and loading the EJBObject and EJBHome     from a deployment descriptor. */  typedef sequence<long> schemaIds;  /* The exception raised if an error during     generation  */  exception EJBGenerationError {    wstring msg;  };  interface DeployEJB {    void translateUsers(out schemaIds ownerNumbers, 			in schemas userNames);    void generate(out Args publish_info, in byteArray descriptor)         raises(EJBGenerationError);  };};/* Session based IIOP */module sess_iiop {  const IOP::ComponentId		TAG_SESSION_IOP = 0x4f524100;  /*   * We don't really need the ipAddr and the createTime in the component tag. We need them   * only when putting the session as part of the object key. For the sake of future support,   * (IIOP 1.2) they are included here as well   */  struct ComponentBody {    string service;    long   session;    string ipAddr; // Where the session is created    sequence<octet>  createTime;   };};